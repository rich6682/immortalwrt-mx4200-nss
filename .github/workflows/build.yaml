name: Build ImmortalWRT (MX4200v1 + NSS)

on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 */2 * * *"

env:
  REMOTE_REPOSITORY: Gaojianli/immortalwrt-ipq
  REMOTE_BRANCH: openwrt-24.10-nss
  CONFIG_FILE: mx4200v1.config
  CUSTOM_FILES_PATH: files/
  RELEASE_PREFIX: openwrt-24.10-nss

jobs:
  check_commits:
    name: Check for new commits
    runs-on: ubuntu-24.04
    outputs:
      new_commits: ${{ steps.check_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for new commits
        id: check_commits
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          latest_sha=$(gh api "repos/${{ env.REMOTE_REPOSITORY }}/commits/${{ env.REMOTE_BRANCH }}" --jq .sha)
          release_body=$(gh api "repos/${{ github.repository }}/releases/latest" --jq .body || echo "")

          echo "Latest upstream commit: $latest_sha"
          if [ -n "$release_body" ]; then
            echo "Release body contains latest commit: $(echo "$release_body" | grep -q "$latest_sha" && echo "Yes" || echo "No")"
          else
            echo "No previous release body found"
          fi

          {
            echo "latest_commit_sha=$latest_sha"
            if [ -z "$release_body" ] || [[ "$release_body" != *"$latest_sha"* ]]; then
              echo "new_commits=true"
            else
              echo "new_commits=false"
            fi
          } >> "$GITHUB_OUTPUT"

  build:
    name: Build OpenWrt
    needs: check_commits
    if: github.event_name == 'workflow_dispatch' || needs.check_commits.outputs.new_commits == 'true'
    runs-on: ubuntu-24.04
    steps:
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            build-essential clang flex bison g++ gawk \
            gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev \
            python3-pip python3-setuptools rsync swig unzip zlib1g-dev file wget
          sudo apt full-upgrade -y

      - name: Checkout remote repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}

      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          path: "builder_repo"

      - name: Add custom patches
        run: |
          if [ -d builder_repo/patches ] && [ "$(ls -A builder_repo/patches)" ]; then
            mv builder_repo/patches/* ./
            for patch in *.patch; do
              git apply --verbose "$patch"
              echo "=== Diff after applying $patch ==="
              git diff HEAD
            done
            echo "Changed files after patch application:"
            git status
          fi

      - name: Update and install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure firmware image
        run: |
          mv builder_repo/${{ env.CONFIG_FILE }} .config
          make defconfig -j$(nproc)

      - name: Include custom files
        run: |
          mkdir -p ${{ env.CUSTOM_FILES_PATH }}
          mv builder_repo/${{ env.CUSTOM_FILES_PATH }}* ${{ env.CUSTOM_FILES_PATH }} || true

      - name: Download dependencies
        run: make download V=s -j$(nproc)

      - name: Build the firmware image
        run: make world V=s -j$(nproc)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ipq807x-images
          path: bin/targets/qualcommax/ipq807x*

  release:
    name: Create release
    needs: [check_commits, build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-24.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ipq807x-images
          path: firmware

      - name: Display structure of downloaded files
        run: ls -R firmware

      - name: Get current date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV

      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: firmware/*
          tag_name: ${{ env.RELEASE_PREFIX }}-${{ env.RELEASE_DATE }}
          name: 🚀 ImmortalWRT MX4200v1 NSS ${{ env.RELEASE_DATE }}
          body: |
            ## 📦 ImmortalWRT Automated Build Release

            **Build Date:** ${{ env.RELEASE_DATE }}

            ### 🔄 Main Repository
            **Repository:** [${{ env.REMOTE_REPOSITORY }}](https://github.com/${{ env.REMOTE_REPOSITORY }})
            **Branch:** `${{ env.REMOTE_BRANCH }}`
            **Commit:** `${{ needs.check_commits.outputs.latest_commit_sha }}`

            ### 📝 Build Information
            - **Target:** Linksys MX4200v1
            - **Configuration:** `${{ env.CONFIG_FILE }}`

            ### 📋 Notes
            - Automated build triggered by ${{ github.event_name }}
            - Previous releases are automatically cleaned up (keeping latest 2)
            ---
            _Generated by GitHub Actions 🤖_

      - name: Clean up old releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
